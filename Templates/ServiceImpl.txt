package {{projectPath}}.services;

import {{projectPath}}.entities.{{EntityName}};
import {{projectPath}}.repositories.{{EntityName}}Repository;
import {{projectPath}}.requests.{{entityName}}.*;
import {{projectPath}}.responses.{{EntityName}}Response;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.stereotype.Service;

@Service
public class {{EntityName}}ServiceImpl implements {{EntityName}}Service {
    private final {{EntityName}}Repository {{entityName}}Repository;
    private final ModelMapper modelMapper;

    public {{EntityName}}ServiceImpl({{EntityName}}Repository {{entityName}}Repository, ModelMapper modelMapper) {
        this.{{entityName}}Repository = {{entityName}}Repository;
        this.modelMapper = modelMapper;
    }

    @Override
    public {{EntityName}}Response Add(Add{{EntityName}}Request request) {
        String id = {{entityName}}Repository.sp_{{EntityName}}_Add();
        {{EntityName}} {{entityName}} = {{entityName}}Repository.sp_{{EntityName}}_GetById(id);
        return modelMapper.map({{entityName}}, {{EntityName}}Response.class);
    }

    @Override
    public void Delete(Delete{{EntityName}}Request request, boolean permanent) {
        if (permanent) {
            {{entityName}}Repository.sp_{{EntityName}}_DeletePermanent(request.getId());
            return;
        }
        {{entityName}}Repository.sp_{{EntityName}}_Delete(request.getId());
    }

    @Override
    public {{EntityName}}Response Edit(Edit{{EntityName}}Request request) {
        {{entityName}}Repository.sp_{{EntityName}}_Update(request.getId());
        {{EntityName}} {{entityName}} = {{entityName}}Repository.sp_{{EntityName}}_GetById(request.getId());
        return modelMapper.map({{entityName}}, {{EntityName}}Response.class);
    }

    @Override
    public Iterable<{{EntityName}}Response> Get(boolean deleted) {
        Iterable<{{EntityName}}> {{entityNames}};

        if (deleted) {
            {{entityNames}} = {{entityName}}Repository.sp_{{EntityName}}_GetDeleted();
        } else {
            {{entityNames}} = {{entityName}}Repository.sp_{{EntityName}}_Get();
        }

        return modelMapper.map({{entityNames}}, new TypeToken<Iterable<{{EntityName}}Response>>() {
        }.getType());
    }

    @Override
    public {{EntityName}}Response GetById(Get{{EntityName}}Request request) {
        {{EntityName}} {{entityName}} = {{entityName}}Repository.sp_{{EntityName}}_GetById(request.getId());
        return modelMapper.map({{entityName}}, {{EntityName}}Response.class);
    }

    @Override
    public Iterable<{{EntityName}}Response> Search(Search{{EntityName}}Request request) {
        Iterable<{{EntityName}}> {{entityNames}} = {{entityName}}Repository.sp_{{EntityName}}_Search();
        return modelMapper.map({{entityNames}}, new TypeToken<Iterable<{{EntityName}}Response>>() {
        }.getType());
    }
}
